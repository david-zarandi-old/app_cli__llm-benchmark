
The above algorithm is a recursive one and the time complexity is ``O(2^n)``. Is it possible to prove that this is the case? Yes, by induction. The inductive step is obvious, since ``f(0) = 0 < f(1) = f(0).``

**Proof:**

Induction on ``n``
- Base Case: ``n < 2``
  - By definition of ``f()`` it returns ``n`` if ``n<2``. So, we can return ``n``. This is because ``f(0)=1``.
  ```typescript
  function f(n: number): number {
    return n < 2 ? n : 1;
}

console.log("The result is %d.", f(4)); // The result is 3
  ```
- Inductive Case: ``n >= 2``
  - By definition of ``f()``, ``f(n)=f(n−1)+f(n−2).``
    > **Note**: We can write this inductively in code. Here is the recursion that we use to prove the inductive case
     ```typescript
   function f(n: number): number {
    return n < 2 ? n : 1 + f(n - 1); // returns f(n-1)
}
console.log("The result is %d.", f(4)); // The result is 3
```
  - ``f()`` can only compute its results for ``n >= 2``. So, ``f(0), ... , and f(8).`` When ``n = 9``, this recursion goes on forever. That means that ``f(1) = n < 2 ? n : (n-1)+...=> 3 < n → false``.
    > **Note**: In the case of ``f()``, we can compute ``f(5)`` by using ``f(4) = 7 + 6; f(4).`` and so on to compute ``f(n) = ... + f(n-1);...+f(2),......f(0)=n < 2 ? n : (n−1)+…>.
  ```typescript
  function f(n: number): number {
    return n < 2 ? n : f(n - 1) + f(n - 2); // returns f(n-1), f(n-2). So, we can compute the result of f(3) by using f(2)(5) = 7 + 6 =9.
}
console.log("The result is %d.", f(4)); // The result is 3
```
So, ``f()`` computes its results for ``n>=1<= 8``. And the base case is ``f(0), ... , and f(7).``
- Now, ``f(2) = 5 + 6 =9=> 9 < 4→ false``. That means that ``f(3): 9 <> 4 > ⇒ true``.
So, the time complexity of ``f()`` is ``O(n)``.
